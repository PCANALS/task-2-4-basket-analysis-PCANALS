#see key metrics#
summary(CarsModel)
?for
?for
for(i in 1:10)
for(i in 1:10)
for(i in 1:10)
for(i in 1:10)
for(i in 1:10){}
rm
for(i in 1:10){}
i
for(i in 1:10){i}
print(i)
for(i in 1:10){print(i)}
for(i in 1:10){
print(i)
}
for(i in 1:10){
print(i+i)
}
i<-1
i<-1
for(i in 1:10){
print(i+i)
}
i<-0
i2<-1
i3<-i2+i3
i3<-i+i2
for(i in 1:10){
print(i+i)
}
for(i in 1:10){
print(i+i2)
}
for(i in 1:10){
print(i3)
}
print(i2)
for(i in 1:10){
print(i2)
}
for(i in 1:10){
print(i+i2)
}
for(i in 1:10){
print(i+i3)
}
i<-c(0,1)
i<-c(0,1,2,3)
i[4]
i[4]+i[3]
num[i]
vector(i)
sum(i)
length(i)
i[4]
i[2]+i[3]
i[3]+i[4]
lengh(i-1)
length(i-1)
length(i)-1
print
x<-lenght(i)-1
x<-length(i)-1
class(x)
length(i)-1, lenght(i)
length(i)-1+ lenght(i)
length(i)-1+ length(i)
length(i)-1
length(i)
i[4]
i[length(i)-1]+i[length(i)]
for(i in 1:10){
print(i[length(i)-1]+i[length(i)])
}
i<-c(0,1)
for(i in 1:10){
print(i[length(i)-1]+i[length(i)])
}
for( in 1:10){i[length(i)-1]+i[length(i)]
print(i])
}
for( in 1:10){
print(i[length(i)-1]+i[length(i)])
}
for(i in 1:10){
print(i[length(i)-1]+i[length(i)])
}
i[length(i)-1]+i[length(i)]
i[length(i)-1]+i[length(i)]
i<-c(0,1)
i[length(i)-1]+i[length(i)]
for(i in 1:10)
for(i in 1:10)
{print(1)}
for(i in 1:10)
+ {print(i)}
for(i in 1:10) {print(i)}
i[length(i)-1]+i[length(i)]
i<-c(0,1)
i[length(i)-1]+i[length(i)]
for(i in 1:10){
print(i[length(i)-1]+i[length(i)])
}
for(i in 1:10){
(i[length(i)-1]+i[length(i)])
}
i<-c(0,1)
i[length(i)-1]+i[length(i)]
for(i in 1:10){
i[length(i)-1]+i[length(i)]
}
i<-c(0,1)
for(i in 1:10){
x=i[length(i)-1]+i[length(i)]
print(x)
}
i<-c(0,1)
for(i in 1:10){
x=i[length(i)-1]+i[length(i)]
print(x)
}
i<-c(0,1)
for(i in 1:10) {print() }
i<-c(0,1)
i[length(i)-1]+i[length(i)]
for(i in 1:10){
i[length(pibo)-1]+i[length(pibo)]
}
pibo<-c(0,1)
for(i in 1:10){
pibo[length(pibo)-1]+pibo[length(pibo)]
}
pibo<-c(0,1)
for(i in 1:10){
r<-pibo[length(pibo)-1]+pibo[length(pibo)]
print(r)
}
add?
?add
??add
for(i in 1:10)
{print(i)}
source('~/Ubiqum/TASK2.4/task-2-4-basket-analysis-PCANALS/mba.R', echo=TRUE)
patterns = random.patterns(nItems = 1000);
View(patterns)
summary(patterns);
patterns = random.patterns(nItems = 2000);
summary(patterns)# vemos los items mas frecuentes#
trans = random.transactions(nItems = 1000, nTrans = 1000, method = "agrawal",  patterns = patterns);
patterns = random.patterns(nItems = 1000);
summary(patterns)# vemos los items mas frecuentes#
trans = random.transactions(nItems = 1000, nTrans = 1000, method = "agrawal",  patterns = patterns);
image(trans);
image(trans); #plot transacctions vs items#
image(trans); #plot transacctions vs items#
image(trans); #plot transacctions vs items#
data("data");
bas = as(data, "transactions");
bas <- as(data, "transactions");
rules <- apriori(bas, parameter=list(support=0.01, confidence=0.5));
rules;
View(trans)
inspect(head(sort(rules, by="lift"),3))
plot(rules)
head(quality(rules))
plot(rules, measure=c("support","lift"), shading="confidence")
plot(rules, measure=c("support","lift"), shading="confidence")
plot(rules, shading="order", control=list(main ="Two-key plot"))
plot(rules, measure=c("support","lift"), shading="confidence")
sel = plot(rules, measure=c("support","lift"), shading="confidence", interactive=TRUE);
subrules = rules[quality(rules)$confidence > 0.8];
subrules
sel = plot(rules, measure=c("support","lift"), shading="confidence", interactive=TRUE);
inspect(head(sort(rules, by="yy"),3))
plot(rules)
head(quality(rules))
plot(rules, measure=c("yy","xx"), shading="confidence")
plot(rules, shading="order", control=list(main ="Two-key plot"))
sel = plot(rules, measure=c("yy","xx"), shading="confidence", interactive=TRUE);
subrules = rules[quality(rules)$confidence > 0.8];
inspect(head(sort(rules, by="yy"),3))
plot(rules)
plot(rules, measure=c("yy","xx"), shading="confidence")
plot(rules, shading="order", control=list(main ="Two-key plot"))
sel = plot(rules, measure=c("yy","xx"), shading="confidence", interactive=TRUE);
sel = plot(rules, measure=c("yy","xx"), shading="confidence", interactive=TRUE)
subrules = rules[quality(rules)$confidence > 0.8]
subrules
sel <-plot(rules, measure=c("yy","xx"), shading="confidence", interactive=TRUE)
rules
sel = plot(rules, measure=c("support","lift"), shading="confidence", interactive=TRUE);
subrules = rules[quality(rules)$confidence > 0.8];
subrules
plot(subrules, method="matrix", measure="lift");
plot(subrules, method="matrix", measure="lift");
plot(subrules, method="matrix", measure="lift", control=list(reorder=TRUE));
plot(subrules, method="matrix3D", measure="lift", control = list(reorder=TRUE));
plot(subrules, method="matrix", measure=c("lift","confidence"), control = list(reorder=TRUE));
sel = plot(rules, method="grouped", interactive=TRUE);
image(trans) #plot transacctions vs items#
itemFrequencyPlot(data, topN=10) #no funciona#
image(trans) #plot transacctions vs items#
trans = random.transactions(nItems = 1000, nTrans = 2000, method = "agrawal",  patterns = patterns);
image(trans) #plot transacctions vs items#
patterns = random.patterns(nItems = 9000);
summary(patterns)# vemos los items mas frecuentes#
patterns = random.patterns(nItems = 9835);
summary(patterns)# vemos los items mas frecuentes#
image(data)
sample(data)
image(sample(data, 1000))
image(sample(data, 500))
image(sample(data, 200))
image(sample(data, 100))
itemFrequencyPlot(data, topN=10) #hay que indicarle un top o no puede plotear#
image(sample(data, 100))
apriori(data)
dtree<-rpart(data)
rpart.plot(x = dtree)
summary(dtree)
dtree<-rpart(data)
library(rpart)
dtree<-rpart(data)
rpart.plot(x = dtree)
library(rpart.plot)
data("data");
dtree<-rpart(data)
rpart.plot(x = dtree)
summary(dtree)
dtree<-rpart(data)
#david directory#
"C:/Users/David/Google Drive/Github/task-2-4-basket-analysis-PCANALS/transactions.csv"
?apriori
apriori(data = data, parameter = 0.2)
priori(data = data, parameter = parameter)
apriori(data = data, parameter = 0.1)
apriori(data = data, parameter = df)
apriori(data = data, parameter = parameter)
RulesName<- apriori (DatasetName, parameter = list(supp = 0.1, conf = 0.8))
dat = read.transactions("transactions.csv",
format = "basket",
sep = ",",
rm.duplicates = T,
encoding = "UTF-8")
dat = read.transactions("transactions.csv",
format = "basket",
sep = ",",
rm.duplicates = T,
encoding = "UTF-8")
dim(dat) #Number of Rows and Columns
size(dat) #Number of items per transaction
arules::LIST(dat)
image(dat) # demasiados datos en transacciones por lo que solo se ve una linea, hay que coger un sample#
sample(dat)
image(sample(dat, 100)) #probado de 100 a 2000 y no se ve un patron#
itemFrequencyPlot(dat, topN=10) #hay que indicarle un top o no puede plotear#
####associations with APRIORI####
apriori(dat)
RulesName<- apriori (dat, parameter = list(supp = 0.1, conf = 0.8))
inspect(RulesName)
inspect(RulesName)
RulesName<- apriori (dat, parameter = list(supp = 0.2, conf = 0.8))
inspect(RulesName)
RulesName<- apriori (dat, parameter = list(supp = 0.2, conf = 0.7))
inspect(RulesName)
RulesName<- apriori (dat, parameter = list(supp = 0.4, conf = 0.6))
RulesName<- apriori (dat, parameter = list(supp = 0.5, conf = 0.5))
RulesName<- apriori (dat, parameter = list(supp = 0.9, conf = 0.5))
RulesName<- apriori (dat, parameter = list(supp = 0.9, conf = 0.9)) #probado con muchas variables y las rules siempre son 0#
RulesName<- apriori (dat, parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
library(arules)
library(arulesViz)
#### LOADING DATASET ####
#david directory#
"C:/Users/David/Google Drive/Github/task-2-4-basket-analysis-PCANALS/transactions.csv"
setwd("C:/Users/pilar/Documents/Ubiqum/TASK2.4/task-2-4-basket-analysis-PCANALS")
df = read.csv("transactions.csv",
header = F,
stringsAsFactors = F)
dat = read.transactions("transactions.csv",
format = "basket",
sep = ",",
rm.duplicates = T,
encoding = "UTF-8")
dim(dat) #Number of Rows and Columns
size(dat) #Number of items per transaction
arules::LIST(dat)
#list(data)
#inspect(data)
image(dat) # demasiados datos en transacciones por lo que solo se ve una linea, hay que coger un sample#
sample(dat)
image(sample(dat, 100)) #probado de 100 a 2000 y no se ve un patron#
itemFrequencyPlot(dat, topN=10) #hay que indicarle un top o no puede plotear#
####associations with APRIORI####
apriori(dat)
RulesName<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
inspect(RulesName)
RulesName<- apriori (dat, parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
RulesName<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
inspect(RulesName)
inspect(RulesName)
View(df)
RulesNameI<- apriori(dat["iMac"], parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
RulesNameI<- apriori(dat-["iMac"], parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
RulesNameI<- apriori(dat[-"iMac"], parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
RulesNameI<- apriori(dat{-"iMac"}, parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
RulesNameI<- apriori(dat{-iMac}, parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
RulesNameI<- apriori(dat{-iMac}, parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
RulesNameI<- apriori(dat{"-iMac"}, parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
RulesNameI<- apriori(dat{-"iMac"}, parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
RulesName<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5, lhs= iMac))
RulesName<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5, lhs= "iMac"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5, lhs= "iMac"),
appearance = list(rhs = c("iMac", "HP Laptop"),
default="lhs"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5, apearance = list(rhs = c("iMac", "HP Laptop"), default="lhs"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5, apearance = list(rhs = c("iMac", "HP Laptop"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5), appearance = list(lhs = c("iMac","HP Laptop"), default="lhs"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5), appearance = list(lhs = c("iMac","HP Laptop"), default="lhs"))
RulesName2<- apriori(dat, parameter = list(supp = 0.05, conf = 0.8), appearance = list(lhs = c("iMac","HP Laptop"), default="lhs"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5), appearance = list(lhs = c("iMac","HP Laptop"), default="lhs"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.5), appearance = list(lhs = c("iMac","HP Laptop")))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.3), appearance = list(lhs = c("iMac","HP Laptop")))
inspect(RulesName2)
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.3), appearance = list(lhs = c("iMac")))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.3), appearance = list(lhs = "iMac"))
inspect(RulesName2)
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.2), appearance = list(lhs = "iMac"))
inspect(RulesName2)
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.2), appearance = list(lhs = "HP Laptop"))
inspect(RulesName2)
sample(dat)
####RANDOM PATTERNS####
patterns = random.patterns(nItems = 9835);
size(dat) #Number of items per transaction
summary(dat)
RulesName3<- apriori(dat, parameter = list(supp = 0.01, conf = 0.2), appearance = list(lhs = "HP Laptop", rhs="Apple Earpods"))
RulesName3<- apriori(dat, parameter = list(supp = 0.01, conf = 0.1), appearance = list(lhs = "HP Laptop", rhs="Apple Earpods"))
RulesName3<- apriori(dat, parameter = list(supp = 0.01, conf = 0.1), appearance = list(lhs = "iMac", rhs="Apple Earpods"))
inspect(RulesName3)
RulesName3<- apriori(dat, parameter = list(supp = 0.01, conf = 0.1), appearance = list(rhs="Apple Earpods"))
#
inspect(RulesName3)
inspect(sort(RulesName3, by = "confidence"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.2), appearance = list(lhs = "CYBERPOWER Gamer Desktop"))
inspect(sort(RulesName2, by = "confidence"))
summary(dat)
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.2), appearance = list(lhs = "CYBERPOWER Gamer Desktop"+"HP Laptop"+"iMac"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.2), appearance = list(lhs = "CYBERPOWER Gamer Desktop","HP Laptop","iMac"))
summary(dat)
image(dat) # demasiados datos en transacciones por lo que solo se ve una linea, hay que coger un sample#
image(sample(dat, 100)) #probado de 100 a 2000 y no se ve un patron#
itemFrequencyPlot(dat, topN=10) #hay que indicarle un top o no puede plotear#
image(sample(dat, 100)) #probado de 100 a 2000 y no se ve un patron#
itemFrequencyPlot(dat, topN=10) #hay que indicarle un top o no puede plotear#
image(sample(dat, 100)) #probado de 100 a 2000 y no se ve un patron#
image(dat) # demasiados datos en transacciones por lo que solo se ve una linea, hay que coger un sample#
dat = read.transactions("transactions.csv",
format = "basket",
sep = ",",
rm.duplicates = T,
encoding = "UTF-8")
summary(dat)
image(dat) # demasiados datos en transacciones por lo que solo se ve una linea, hay que coger un sample#
plot(subrules, method="matrix", measure="lift");
bas <- as(data, "transactions");
rules <- apriori(bas, parameter=list(support=0.01, confidence=0.5));
rules
sel = plot(rules, measure=c("support","lift"), shading="confidence", interactive=TRUE);
subrules = rules[quality(rules)$confidence > 0.8];
subrules
plot(subrules, method="matrix", measure="lift");
plot(subrules, method="matrix", measure="lift", control=list(reorder=TRUE));
plot(subrules, method="matrix3D", measure="lift");
plot(subrules, method="matrix3D", measure="lift", control = list(reorder=TRUE));
plot(subrules, method="matrix", measure=c("lift", "confidence"));
plot(subrules, method="matrix", measure=c("lift","confidence"), control = list(reorder=TRUE));
plot(rules, method="grouped");
plot(rules, method="grouped", control=list(k=50));
sel = plot(rules, method="grouped", interactive=TRUE);
itemFrequencyPlot(dat, topN=10) #hay que indicarle un top o no puede plotear#
image(trans) #plot transacctions vs items#
patterns = random.patterns(nItems = 9835);
summary(patterns)# vemos los items mas frecuentes#
trans = random.transactions(nItems = 1000, nTrans = 2000, method = "agrawal",  patterns = patterns);
image(trans)
trans = random.transactions(nItems = 1000, nTrans = 2000, method = "agrawal",  patterns = patterns);
patterns = random.patterns(nItems = 1000);
summary(patterns)# vemos los items mas frecuentes#
trans = random.transactions(nItems = 1000, nTrans = 1000, method = "agrawal",  patterns = patterns);
image(trans) #plot transacctions vs items#
image(sample(dat, 5000)) #probado de 100 a 2000 y no se ve un patron#
image(sample(dat, 2000)) #probado de 100 a 2000 y no se ve un patron#
summary(dat)
plot(RulesName3)
R
RulesName3<- apriori(dat, parameter = list(supp = 0.01, conf = 0.1), appearance = list(rhs="Apple Earpods"))
plot(RulesName3)
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.2), appearance = list(lhs = "iMac"))
inspect(sort(RulesName2, by = "confidence"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01), appearance = list(lhs = "iMac"))
inspect(sort(RulesName2, by = "confidence"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.0), appearance = list(lhs = "iMac"))
inspect(sort(RulesName2, by = "confidence"))
RulesName2<- apriori(dat, parameter = list(supp = 0.01, conf = 0.0, minlen=2), appearance = list(lhs = "iMac"))
inspect(sort(RulesName2, by = "confidence"))
str(dat)
summary(dat)
?apriori
plot(rules, method="grouped");
sel = plot(RulesName2, method="grouped", interactive=TRUE);
rm(list = ls())
#### OBJECTIVES ####
## You will be discovering any interesting relationships (or associations) between customers #
#transactions and the item(s) they have purchased. These associations can then be used to drive
#sales-oriented initiatives such as recommender systems like the ones used by Amazon and
#other eCommerce sites.
## Are there any interesting patterns or item relationships within Electronidex's transactions?
## Would Blackwell benefit from selling any of Electronidex's items?
## In your opinion, should Blackwell acquire Electronidex?
## If Blackwell does acquire Electronidex, do you have any recommendations for Blackwell?
#(Ex: cross-selling items, sale promotions, should they remove items, etc.)#
#### LOADING LIBRARIES ####
library(arules)
library(arulesViz)
#david directory#
#setwd("C:/Users/David/Google Drive/Github/task-2-4-basket-analysis-PCANALS")
#pilar directory#
setwd("C:/Users/pilar/Documents/Ubiqum/TASK2.4/task-2-4-basket-analysis-PCANALS")
#### LOADING DATASET ####
data = read.transactions("transactions.csv",
format = "basket",
sep = ",",
rm.duplicates = T,
encoding = "unknown")
#### LOOKING DATASET ####
dim(data) #Number of Rows and Columns
size(data) #Number of items per transaction
#arules::LIST(data) #Diferent of "inspect". With LIST a list is actually generated
itemLabels(data)
itemFrequencyPlot(x = data, topN = 15) #Top ventas
rules = apriori(data = data, parameter = list(support = 0.01, confidence = 0.5))
inspect(head(sort(rules, by="lift"),5))
plot(rules, method = "graph")
summary(rules)
image(sample(dat, 2000)) #probado de 100 a 2000 y no se ve un patron#
itemFrequencyPlot(dat, topN=10) #hay que indicarle un top o no puede plotear#
apriori(data)
RulesName<- apriori(data, parameter = list(supp = 0.01, conf = 0.5)) #probado con muchas variables y las rules siempre son 0#
RulesName2<- apriori(data, parameter = list(supp = 0.01, conf = 0.0, minlen=2), appearance = list(lhs = "iMac"))
RulesName3<- apriori(data, parameter = list(supp = 0.01, conf = 0.1), appearance = list(rhs="Apple Earpods"))
plot(RulesName3)
inspect(sort(RulesName2, by = "confidence"))
inspect(RulesName)
patterns = random.patterns(nItems = 1000);
summary(patterns)# vemos los items mas frecuentes#
trans = random.transactions(nItems = 1000, nTrans = 1000, method = "agrawal",  patterns = patterns);
image(trans) #plot transacctions vs items#
data("data");
bas <- as(data, "transactions");
rules <- apriori(bas, parameter=list(support=0.01, confidence=0.5));
rules
sel = plot(rules, measure=c("support","lift"), shading="confidence", interactive=TRUE);
